<?xml version="1.0" encoding="ISO-8859-1"?>
<project name="Obfuscate" default="obfuscate-demo">

  <!-- This ant file can be used to build the Javascript name obfuscator that -->
  <!-- has been created specifically for the yFiles library                   -->
  <!-- The name obfuscator can be used to process the library files and adjust-->
  <!-- the usages of the API accordingly in the application files.            -->
  <!-- The build script compiles the obfuscator from sources                  -->
  <!-- Then obfuscates the application specified in the below property        -->
  <!-- "demo-name" when the "obfuscate-demo" task is run.                     -->
  <!-- This will dramatically reduce the size of the downloaded javascript    -->
  <!-- and thus improves performance for the end user as well as protects the -->
  <!-- library from being easily reused by third parties.                     -->
  <!-- The "yui-compress-demo" task can be used for additional compression of -->
  <!-- the application script files                                           -->

  
  <!-- ADJUST THIS TO YOUR NEEDS - - - - - - - - - - - - - - - - - - - - - -  -->
  <!-- Below is the demo name and path to be obfuscated  -->
  <!-- the result will be placed into the directory with the suffix "-obf" next -->
  <!-- to the original demo and is self-contained within its directory -->
  <property name="demo-name" value = "demos\Complete\demo.yfiles.graph.collapse"/>

  <!-- the location of the yfiles for html package -->
  <property name="dir.yfiles-for-html" location="${basedir}/../"/>

  <!-- ADJUST THIS TO YOUR NEEDS - - - - - - - - - - - - - - - - - - - - - -  -->
  <!-- the resulting javascript application directory where the obfuscated variant -->
  <!-- will be placed in, the directory will be self-contained -->
  <!-- this is the "deploy" directory at the root of the package by default -->
  <!-- the resulting directory is self-containing so could be placed anywhere else -->
  <property name="js.app.obf.dir" location="${dir.yfiles-for-html}/deploy/${demo-name}"/>

  
  <!-- properties for creating the obfuscator -->
  <dirname property="basedir" file="${ant.file}"/>

  <!-- various file locations of the name obfuscator -->
  <property name="src.obfuscator" location="${basedir}/src"/>
  <property name="bin.obfuscator" location="${basedir}/bin"/>
  <property name="jar.obfuscator" location="${basedir}/js-obfuscator.jar"/>
  <property name="dir.lib" location="${basedir}/lib/"/>

  <!-- properties for Rhino, which the obfuscator depends on -->
  <property name="rhino.version" value="1_7R4"/>
  <property name="rhino.filename" value="rhino${rhino.version}.zip"/>
  <property name="rhino.download" value="http://cloud.github.com/downloads/mozilla/rhino/${rhino.filename}"/>
  <property name="rhino.zip" value="${dir.lib}/${rhino.filename}"/>
  <property name="contents.rhino" value="${dir.lib}/rhino${rhino.version}"/>
  <property name="src.rhino" value="${contents.rhino}/rhino${rhino.version}/src"/>
  <property name="rhino.smalljar" location="${contents.rhino}/rhino${rhino.version}/build/rhino${rhino.version}/smalljs.jar"/>
  <property name="jar.rhino.relpath" value="lib/rhino${rhino.version}.jar"/>
  <property name="jar.rhino" location="${dir.lib}/rhino${rhino.version}.jar"/>

  <!-- properties for the YUI Compressor that are required by the "yui-compress-demo" task -->
  <property name="yui.version" value="2.4.7"/>
  <property name="yui-compressor.download" value="http://yui.zenfs.com/releases/yuicompressor/yuicompressor-${yui.version}.zip"/>
  <property name="yui-compressor.download.zip" location="${dir.lib}/yuicompressor-${yui.version}.zip"/>
  <property name="jar.yui-compressor" location="${dir.lib}/yuicompressor-${yui.version}.jar"/>

  <!-- properties for the actual obfuscation -->

  <!-- the location of the unobfuscated library sources -->
  <property name="dir.lib.yfiles" location="${dir.yfiles-for-html}/lib"/>

  <!-- the location of the demo applications -->
  <property name="dir.yfiles-demos" location="${dir.yfiles-for-html}/demos/"/>

  <!-- the javascript application directory to obfuscate -->
  <property name="js.app.dir" location="${dir.yfiles-for-html}/${demo-name}"/>

  <!-- where to place the obfuscated library into -->
  <property name="dir.obf.lib.yfiles" location="${js.app.obf.dir}/lib"/>
  <property name="dir.obf.lib.demo-framework" location="${js.app.obf.dir}/demo-framework"/>


  <target name="-init">
    <mkdir dir="${dir.lib}"/>
    <available property="rhino.exists" file="${rhino.zip}"/>
    <available property="rhino-jar.exists" file="${jar.rhino}"/>
    <available property="yui-compressor-jar.exists" file="${jar.yui-compressor}"/>
  </target>

  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>

  <target name="compile.obfuscator" depends="build-rhino" description="Compiles the obfuscator">
    <mkdir dir="${bin.obfuscator}"/>
    <javac includeantruntime="true"
           destdir="${bin.obfuscator}"
           debug="${compiler.debug}"
           nowarn="${compiler.generate.no.warnings}"
           fork="true"
           srcdir="${src.obfuscator}">
      <classpath path="${rhino.smalljar}"/>
    </javac>
  </target>

  <target name="jar.obfuscator" depends="compile.obfuscator" description="Jars the name obfuscator">
    <jar basedir="${bin.obfuscator}"
         destfile="${jar.obfuscator}"
         update="false"
            >
      <manifest>
        <attribute name="Class-Path" value="${jar.rhino.relpath}"/>
        <attribute name="Main-Class" value="com.yworks.js.Obfuscator"/>
      </manifest>
    </jar>
  </target>
  
  <target name="get-rhino" unless="rhino.exists" depends="-init" description="Downloads Rhino">
    <echo>The next step will download rhino${rhino.version} from ${rhino.download}.</echo>
    <echo>Rhino is used for parsing the JavaScript source files and is required by the</echo>
    <echo>Javascript name obfuscator. The implementation is the same that is part of the official</echo>
    <echo>J2SE6 from Oracle (package sun.org.mozilla.javascript.internal) and is licensed</echo>
    <echo>under Mozilla Public License 2.0 (http://www.mozilla.org/MPL/).</echo>
    <input message="Do you want to download Rhino from ${rhino.download}? y/n" validargs="y,n" addproperty="download.rhino" defaultvalue="n"/>
    <condition property="download.abort">
      <equals arg1="n" arg2="${download.rhino}"/>
    </condition>
    <fail if="download.abort">Download aborted by user.</fail>
    <get src="${rhino.download}" dest="${rhino.zip}" skipexisting="false" ignoreerrors="true"/>
  </target>

  <target name="get-yui-compressor-ask" unless="yui-compressor-jar.exists" depends="-init" description="Asks for permission to download YUI compressor">
    <echo>The next step will download YUI Compressor from ${yui-compressor.download}.</echo>
    <echo>The YUI Compressor is used for additionally shrinking the JavaScript source files after</echo>
    <echo>name obfuscating the library.</echo>
    <echo>The YUI Compressor is available at http://yuilibrary.com/download/yuicompressor/</echo>
    <echo>under BSD License and Mozilla Public License.</echo>
    <input message="Do you want to download YUI Compressor from ${yui-compressor.download}? y/n" validargs="y,n" addproperty="download.yui-compressor" defaultvalue="n"/>
    <condition property="yui-compressor-jar.exists">
      <equals arg1="n" arg2="${download.yui-compressor}"/>
    </condition>
  </target>
  
  <target name="get-yui-compressor" unless="yui-compressor-jar.exists" depends="get-yui-compressor-ask" description="Downloads YUI compressor">
    <get src="${yui-compressor.download}" dest="${yui-compressor.download.zip}" skipexisting="false" ignoreerrors="true"/>
  </target>

  <target name="unzip-yui-compressor" depends="get-yui-compressor" unless="yui-compressor-jar.exists" description="Unzips and compiles the YUI Compressor">
    <unzip src="${yui-compressor.download.zip}" dest="${dir.lib}"/>
    <ant antfile="${dir.lib}/yuicompressor-${yui.version}/build.xml" inheritall="false" usenativebasedir="true"/>
    <copy file="${dir.lib}/yuicompressor-${yui.version}/build/yuicompressor-${yui.version}.jar" tofile="${jar.yui-compressor}"/>
  </target>

  <target name="unzip-rhino" depends="get-rhino" unless="rhino-jar.exists" description="Unzips Rhino">
    <mkdir dir="${contents.rhino}"/>
    <unzip src="${rhino.zip}" dest="${contents.rhino}"/>
  </target>

  <target name="build-rhino" depends="unzip-rhino" unless="rhino-jar.exists" description="Builds Rhino for the name obfuscator">
    <ant inheritall="false" usenativebasedir="true" antfile="${contents.rhino}/rhino${rhino.version}/build.xml" target="smalljar"/>
    <copy file="${rhino.smalljar}" tofile="${jar.rhino}"/>
  </target>

  <target name="clean" depends="clean-lib" description="Cleans up everything">
    <delete dir="${bin.obfuscator}"/>
    <delete file="${jar.obfuscator}"/>
  </target>

  <target name="clean-lib" depends="-init" description="Cleans up the library directory">
    <delete file="${dir.lib}" includeemptydirs="true"/>
  </target>

  <target name="all" depends="clean, get-rhino, compile.obfuscator, jar.obfuscator"
          description="Build everything related to the name obfuscator"/>

  <!-- the actual obfuscation task -->
  <target name="obfuscate-demo" depends="jar.obfuscator" description="Obfuscates and shrinks the application">
    <echo>Obfuscating demo ${demo-name}.</echo>
    <echo>To ${js.app.obf.dir}.</echo>

    <!-- reference the obfuscator task implementation -->
    <taskdef classpath="${jar.obfuscator}" classname="com.yworks.js.JSObfuscateTask" name="jsobfuscate" />

    <!-- create the directory for placing the application and the obfuscated library -->
    <mkdir dir="${js.app.obf.dir}"/>
    <mkdir dir="${js.app.obf.dir}/resources"/>
    <mkdir dir="${dir.obf.lib.yfiles}"/>
    <mkdir dir="${dir.obf.lib.demo-framework}"/>

    <!-- copy over the non-js files and adjust the commonly used paths -->
    <copy todir="${js.app.obf.dir}" overwrite="true">
      <fileset dir="${js.app.dir}">
        <include name="**"/>
        <exclude name="**/*.js"/>
      </fileset>
      <filterchain>
        <tokenfilter>
          <!-- for the demos -->
          <!-- the resources and license files in the resources directory will be moved here -->
          <replaceregex pattern="\.\./\.\./resources/" replace="./resources/" flags="gi"/>
          <!-- the demo framework and the AMD loader will be moved here, too -->
          <replaceregex pattern="\.\./\.\./demo-framework/" replace="./demo-framework/" flags="gi"/>

          <!-- for the tutorials -->
          <!-- the resources and license files in the resources directory will be moved here -->
          <replaceregex pattern="\.\./\.\./\.\./demos/resources/" replace="./resources/" flags="gi"/>
          <!-- the demo framework and the AMD loader will be moved here, too -->
          <replaceregex pattern="\.\./\.\./\.\./demos/demo-framework/" replace="./demo-framework/" flags="gi"/>

          <!-- and the yFiles library of course -->
          <replaceregex pattern="\.\./\.\./\.\./lib/" replace="./lib/" flags="gi"/>
        </tokenfilter>
      </filterchain>
    </copy>

    <!-- copy over the resources and the license file -->
    <copy todir="${js.app.obf.dir}/resources">
      <fileset dir="${dir.yfiles-demos}/resources">
        <include name="**"/>
      </fileset>
    </copy>

    <!-- now perform name obfuscation -->
    <!-- "demo" and "start" are used from within the HTML wrappers, so exclude them from obfuscation -->
    <jsobfuscate libdir="${dir.lib.yfiles}" outlibdir="${dir.obf.lib.yfiles}" blacklist="demo,start,collapse">
      <!-- now parse and adjust the js files from the application -->
      <sources obfuscate="true" dir="${js.app.dir}" outdir="${js.app.obf.dir}">
        <include name="**/*.js"/>
        <mapper>
          <globmapper from="*.js" to="*.js"/>
        </mapper>
      </sources>
      <!-- parse but *not* obfuscate the demo framework sources -->
      <sources obfuscate="false" dir="${dir.yfiles-demos}/demo-framework" outdir="${dir.obf.lib.demo-framework}">
        <include name="**/*.js"/>
        <mapper>
          <globmapper from="*.js" to="*.js"/>
        </mapper>
      </sources>
    </jsobfuscate>

    <echo>Obfuscation done - result is in ${js.app.obf.dir}</echo>
  </target>
  
  <target name="yui-compress-demo" depends="obfuscate-demo, unzip-yui-compressor" if="yui-compressor-jar.exists" description="Additionally runs the YUI Compressor on the selected demo to shrink the sources even more.">
    <!-- construct the command line for the compressor -->
    <pathconvert property="source-files" pathsep=" ">
      <fileset dir="${js.app.obf.dir}">
        <include name="*.js"/>
      </fileset>
    </pathconvert>

    <echo>Running YUI Compressor</echo>
    <java jar="${jar.yui-compressor}" fork="true" failonerror="true">
      <!-- rename the processed files to *.jsmin -->
      <arg line="--type js -o '.js$:.jsmin'"/>
      <arg line="${source-files}"/>
    </java>

    <!-- rename the minified versions back to the original names -->
    <move todir="${js.app.obf.dir}">
      <fileset dir="${js.app.obf.dir}">
        <include name="*.jsmin"/>
      </fileset>
      <mapper>
        <globmapper from="*.jsmin" to="*.js"/>
      </mapper>
    </move>
  </target>
</project>
